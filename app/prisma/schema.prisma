generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user AppearanceUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String         @id @default(cuid())
  sessionToken String         @unique
  userId       String
  expires      DateTime
  user         AppearanceUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AppearanceUser {
  id            String               @id @default(cuid())
  name          String?              @db.VarChar(255)
  email         String               @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  appearanceStages AppearanceStage[]
  supporters       Supporter[]
}

model Supporter {
  id                    Int                    @id @default(autoincrement())
  name                  String                 @db.VarChar(255)
  appearanceUserId      String
  appearanceUser        AppearanceUser         @relation(fields: [appearanceUserId], references: [id])
  reservationReceptions ReservationReception[]
}

model AppearanceStage {
  id                    Int                    @id @default(autoincrement())
  title                 String                 @db.VarChar(255)
  appearanceUserId      String
  appearanceUser        AppearanceUser         @relation(fields: [appearanceUserId], references: [id])
  performanceSchedules  PerformanceSchedule[]
  saleTickets           SaleTicket[]
  deleteAppearanceStage DeleteAppearanceStage?
}

model PerformanceSchedule {
  id                    Int                    @id @default(autoincrement())
  startedAt             DateTime
  appearanceStageId     Int
  appearanceStage       AppearanceStage        @relation(fields: [appearanceStageId], references: [id])
  reservationReceptions ReservationReception[]
}

model ReservationReception {
  id                    Int                 @id @default(autoincrement())
  receiveType           Int
  receptionAt           DateTime
  performanceScheduleId Int
  supporterId           Int
  performanceSchedule   PerformanceSchedule @relation(fields: [performanceScheduleId], references: [id])
  supporter             Supporter           @relation(fields: [supporterId], references: [id])
  reservationTickets    ReservationTicket[]
}

model SaleTicket {
  id                 Int                 @id @default(autoincrement())
  appearanceStageId  Int
  type               String              @db.VarChar(255)
  price              Int
  appearanceStage    AppearanceStage     @relation(fields: [appearanceStageId], references: [id])
  reservationTickets ReservationTicket[]
}

model ReservationTicket {
  id                      Int                  @id @default(autoincrement())
  saleTicketId            Int
  count                   Int
  reservationReceptionId  Int
  cancelReservationTicket CancelReservationTicket?
  reservationReceptions   ReservationReception @relation(fields: [reservationReceptionId], references: [id])
  saleTicket              SaleTicket           @relation(fields: [saleTicketId], references: [id])
}

model CancelReservationTicket {
  id                  Int               @id @default(autoincrement())
  canceledAt          DateTime
  reservationTicketId Int               @unique
  reservationTicket   ReservationTicket @relation(fields: [reservationTicketId], references: [id])
}

model DeleteAppearanceStage {
  id                Int             @id @default(autoincrement())
  deletedAt         DateTime
  appearanceStageId Int             @unique
  appearanceStage   AppearanceStage @relation(fields: [appearanceStageId], references: [id])

}
